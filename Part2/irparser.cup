import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

scan with {: return s.next_token(); :};



/*Terminals*/
terminal            PREFIX,SUFFIX,EQ,CONCAT, LPAREN, RPAREN,LBRAC,RBRAC,COMMA,IF,ELSE,REVERSE;
terminal String     STRING_LITERAL,IDENTIFIER;     

/*  Non terminals */
non terminal            prog,e,expr_main,funcall,funcall_in,fundef,arg_main,main,arg_def,expr_in,rev_in,rev_main,arg_in,if_stmt,if_stmt_m;


precedence left IF, ELSE;
precedence left SUFFIX,PREFIX,EQ;       
precedence left CONCAT;    
precedence right REVERSE;  


/*Grammar rules*/
prog ::= e:e1 {: System.out.println("rev_eval(x){\nreverse x\n}\n"+e1); :}
        |
;
e ::= main:m {:RESULT = m;:}
    | fundef:f e:e1 {: RESULT = f + "\n" + e1; :} // Allow multiple function definitions
    | fundef:f {: RESULT = f; :}
    ;

/*Main rules*/

main ::= expr_main:e1 main:m {: RESULT = e1 + "\n" + m; :}
       | expr_main:e1 {: RESULT = e1;  :}
;

expr_main ::= funcall:f {: RESULT  = f; :}
        | if_stmt_m:ifst {: RESULT  = ifst; :}
        | expr_main:e1 CONCAT expr_main:e2 {: RESULT  = e1 + "+" + e2; :}
        | STRING_LITERAL:i {: RESULT  = "\"" + i + "\""; :}
        | REVERSE expr_main:e1 {: RESULT = "reverse " + e1; :}
        ;

funcall ::= IDENTIFIER:i LPAREN arg_main:a RPAREN {: RESULT = i+"(" + a + ")"; :}
          | IDENTIFIER:i LPAREN RPAREN {: RESULT = i+"()"; :}
;

if_stmt_m ::= IF LPAREN expr_main:e1 SUFFIX expr_main:e2 RPAREN expr_main:e3 ELSE expr_main:e4 {: RESULT = "if" + "(" + "rev_eval(" + e1 + ")"+ " prefix " + "rev_eval(" + e2 + ")"+ ")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN expr_main:e1 PREFIX expr_main:e2 RPAREN expr_main:e3 ELSE expr_main:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN expr_main:e1 EQ expr_main:e2 RPAREN expr_main:e3 ELSE expr_main:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + "if" + "(" + e2 + " prefix " + e1 + ")"+ "\n" + e3 + "\n" + "else" + "\n" + e4 + "\n" + "else" + "\n" + e4;  :}
;

arg_main ::= expr_main:e1 COMMA arg_main:a {: RESULT = e1 + "," + a; :}
       | expr_main:e1 {: RESULT = e1; :}
;

/*Rules for function definition*/

expr_in ::= IDENTIFIER:i {: RESULT  = i; :}
        | REVERSE expr_in:e1 {: RESULT = "reverse " + e1; :}
        | expr_in:e1 CONCAT expr_in:e2 {: RESULT  = e1 + "+" + e2; :}
        | IDENTIFIER:i LPAREN arg_in:a RPAREN {: RESULT = i+"(" + a + ")"; :}
        | IDENTIFIER:i LPAREN RPAREN {: RESULT = i+"()"; :}
        | if_stmt:ifst {: RESULT  = ifst; :}
        | STRING_LITERAL:i {: RESULT  = "\"" + i + "\""; :}
;

fundef ::= IDENTIFIER:i LPAREN arg_def:a RPAREN LBRAC expr_in:e1 RBRAC {: RESULT = i + "(" + a + ")" + "{" + "\n" + e1 + "\n" + "}"; :}
         | IDENTIFIER:i LPAREN  RPAREN LBRAC expr_in:e1 RBRAC {: RESULT = i + "(" + ")" + "{" + "\n" + e1 + "\n" + "}"; :}
;

if_stmt ::= IF LPAREN expr_in:e1 SUFFIX expr_in:e2 RPAREN expr_in:e3 ELSE expr_in:e4 {: RESULT = "if" + "(" + "rev_eval(" + e1 + ")"+ " prefix " + "rev_eval(" + e2 + ")"+")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN expr_in:e1 PREFIX expr_in:e2 RPAREN expr_in:e3 ELSE expr_in:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN expr_in:e1 EQ expr_in:e2 RPAREN expr_in:e3 ELSE expr_in:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + "if" + "(" + e2 + " prefix " + e1 + ")"+ "\n" + e3 + "\n" + "else" + "\n" + e4 + "\n" + "else" + "\n" + e4;  :}
;

arg_def ::= IDENTIFIER:i COMMA arg_def:a  {: RESULT = i + ", " + a; :}
       | IDENTIFIER:i {: RESULT =  i; :}
;

arg_in ::= expr_in:e1 COMMA  arg_in:a {: RESULT =  e1 + "," + a; :}
        | expr_in:e1 {: RESULT = e1; :}
;