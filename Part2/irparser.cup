import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

scan with {: return s.next_token(); :};



/*Terminals*/
terminal            PREFIX,SUFFIX,EQ,CONCAT, LPAREN, RPAREN,LBRAC,RBRAC,COMMA,IF,ELSE,REVERSE;
terminal String     STRING_LITERAL,IDENTIFIER;     

/*  Non terminals */
non terminal            prog,e,expr,funcall,fundef,if_stmt,arg,revid,revstr,main,var,if_stmt_m,arg2,funcall_d,arg3;
non terminal String id;

precedence left IF, ELSE;
precedence left SUFFIX,PREFIX,EQ;       
precedence left CONCAT;    
precedence right REVERSE;  


/*Grammar rules*/
prog ::= e:e1 {: System.out.println(e1); :}
        |
;
e ::= main:m {:RESULT = m;:}
    | fundef:f e:e1 {: RESULT = f + "\n" + e1; :} // Allow multiple function definitions
    | fundef:f {: RESULT = f; :}
    ;
main ::= expr:e1 main:m {: RESULT = e1 + "\n" + m; :}
       | expr:e1 {: RESULT = e1;  :}
;
var ::= IDENTIFIER:i {: RESULT  = i; :}
        | revid:r {: RESULT  = r ; :}
        | var:v1 CONCAT var:v2 {: RESULT  = v1 + "+" + v2; :}
        | IDENTIFIER:i LPAREN arg3:a RPAREN {: RESULT = i+"(" + a + ")"; :}
        | if_stmt:ifst {: RESULT  = ifst; :}
        | STRING_LITERAL:i {: RESULT  = "\"" + i + "\""; :}
        | revstr:r {: RESULT  = r; :}
;
expr ::= funcall:f {: RESULT  = f; :}
        | if_stmt_m:ifst {: RESULT  = ifst; :}
        | expr:e1 CONCAT expr:e2 {: RESULT  = e1 + "+" + e2; :}
        | STRING_LITERAL:i {: RESULT  = "\"" + i + "\""; :}
        | revstr:r {: RESULT  = r; :}
        ;
funcall ::= IDENTIFIER:i LPAREN arg:a RPAREN {: RESULT = i+"(" + a + ")"; :}
          | IDENTIFIER:i LPAREN RPAREN {: RESULT = i+"()"; :}
;
fundef ::= IDENTIFIER:i LPAREN arg2:a RPAREN LBRAC var:e1 RBRAC {: RESULT = i + "(" + a + ")" + "{" + "\n" + e1 + "\n" + "}"; :}
         | IDENTIFIER:i LPAREN  RPAREN LBRAC var:e1 RBRAC {: RESULT = i + "(" + ")" + "{" + "\n" + e1 + "\n" + "}"; :}
;

if_stmt ::= IF LPAREN var:e1 SUFFIX var:e2 RPAREN var:e3 ELSE var:e4 {: RESULT = "if" + "(" + "reverse " + e1 + " prefix " + "reverse " + e2 + ")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN var:e1 PREFIX var:e2 RPAREN var:e3 ELSE var:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN var:e1 EQ var:e2 RPAREN var:e3 ELSE var:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + "if" + "(" + e2 + " prefix " + e1 + ")"+ "\n" + e3 + "\n" + "else" + "\n" + e4 + "\n" + "else" + "\n" + e4;  :}
;
if_stmt_m ::= IF LPAREN expr:e1 SUFFIX expr:e2 RPAREN expr:e3 ELSE expr:e4 {: RESULT = "if" + "(" + "reverse " + e1 + " prefix " + "reverse " + e2 + ")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN expr:e1 PREFIX expr:e2 RPAREN expr:e3 ELSE expr:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + e3 + "\n" + "else" + "\n" + e4;   :}
           | IF LPAREN expr:e1 EQ expr:e2 RPAREN expr:e3 ELSE expr:e4 {: RESULT = "if" + "(" + e1 + " prefix " + e2 + ")" + "\n" + "if" + "(" + e2 + " prefix " + e1 + ")"+ "\n" + e3 + "\n" + "else" + "\n" + e4 + "\n" + "else" + "\n" + e4;  :}
;
arg ::= expr:e1 COMMA arg:a {: RESULT = e1 + "," + a; :}
       | expr:e1 {: RESULT = e1; :}
;
arg2 ::= IDENTIFIER:i COMMA arg2:a  {: RESULT = i + ", " + a; :}
       | IDENTIFIER:i {: RESULT =  i; :}
;
arg3 ::= var:v COMMA  arg3:a {: RESULT =  v + "," + a; :}
        | var:v {: RESULT = v; :}
;
revid ::= REVERSE revid:r {: RESULT = "reverse " + r ; :}
     | REVERSE IDENTIFIER:i {: RESULT = "reverse " + i  ; :}
;
revstr ::= REVERSE revstr:r {: RESULT = "reverse " + r; :}
     | REVERSE STRING_LITERAL:s {: RESULT = "reverse " + "\"" + s + "\""; :}
;  