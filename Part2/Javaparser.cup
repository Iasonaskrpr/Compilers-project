import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser2(Scanner s){ this.s=s; }
:}

scan with {: return s.next_token(); :};



/*Terminals*/
terminal            PREFIX,SUFFIX,EQ,CONCAT, LPAREN, RPAREN,LBRAC,RBRAC,COMMA,IF,ELSE,REVERSE;
terminal String     STRING_LITERAL,IDENTIFIER;     

/*  Non terminals */
non terminal            prog,e,expr_main,funcall,funcall_in,fundef,arg_main,main,arg_def,expr_in,arg_in;


precedence left IF, ELSE;
precedence left PREFIX;       
precedence left CONCAT;    
precedence right REVERSE;  


/*Grammar rules*/


prog ::= e:e1 {: System.out.println("import java.io.*;\n\n"+"public class Translated{\n\t"+ e1 + "}" ); :} //Make sure we accept empty programs, handle EOF and also add necessary class definition
        |
;
e ::= main:m {:RESULT = "public static void main(String[] args) {\n\t" + m + "\n}\n";:} //Force program to have a main, if not throw parse error
    | fundef:f e:e1 {: RESULT = "public static String  "+ f + "\n" + e1; :} // Allow multiple function definitions and make sure they have the correct return type
    ;

/*Rules for Main 
Seperated main rules and function rules to make sure IDENTIFIER are not allowed in main*/

main ::= expr_main:e1 main:m {: RESULT = "System.out.println(" + e1 +")"+ ";"+ "\n\t" + m; :}
        | expr_main:e1 {: RESULT = "System.out.println(" + e1 +")"+ ";";  :}
;

expr_main ::=  REVERSE expr_main:e1 {: RESULT = "new StringBuilder(" + e1 + ").reverse().toString()"; :} //Uses .reverse function from java
        | IF LPAREN expr_main:v1 PREFIX expr_main:v2 RPAREN expr_main:v3 ELSE expr_main:v4 {: RESULT = "(" + v2 + ".toString().startsWith(" + v1 + ")" + ")" + "?" + "(" + v3 + ")" + ":" + "(" + v4 + ")";   :} //Uses .startsWith java function to evaluate prefix and also turns if-else to ternary since the have the same functionality
        | funcall:f {: RESULT  = f; :}
        | STRING_LITERAL:i {: RESULT  = "\""+i+"\""; :} // Enclose strings in ""
        | expr_main:e1 CONCAT expr_main:e2 {: RESULT  = "(" +"(" + e1 +")"+ "+" +"(" + e2 +")" + ")"; :}  //added parentheses to make sure correct precedence is kept
;
//Make sure we allow empty function calls
funcall ::= IDENTIFIER:i LPAREN arg_main:a RPAREN {: RESULT = i+"(" + a + ")"; :}
          | IDENTIFIER:i LPAREN RPAREN {: RESULT = i+"()"; :}
;

arg_main ::= expr_main:e1 COMMA arg_main:a {: RESULT = e1 + "," + a; :}
       | expr_main:e1 {: RESULT = e1; :}
;

/*Rules for function definition*/

fundef ::= IDENTIFIER:i LPAREN arg_def:a RPAREN LBRAC expr_in:e1 RBRAC {: RESULT = i + "("+ a + ")" + "{" + "\n\t" + "return " + e1 + ";"+ "\n" + "}"; :}
         | IDENTIFIER:i LPAREN  RPAREN LBRAC expr_in:e1 RBRAC {: RESULT = i + "(" + ")" + "{" + "\n\t" + "return " + e1 + ";" + "\n" + "}"; :}
;
expr_in ::= REVERSE expr_in:e1 {: RESULT = "new StringBuilder(" + e1 + ").reverse().toString()"; :}
        |IDENTIFIER:i {: RESULT  = i; :}
        | funcall_in:f {: RESULT  = f ; :}
        | expr_in:e1 CONCAT expr_in:e2 {: RESULT  = "(" +"(" + e1 +")"+ "+" +"(" + e2 +")" + ")"; :}
        | IF LPAREN expr_in:e1 PREFIX expr_in:e2 RPAREN expr_in:e3 ELSE expr_in:e4 {: RESULT = "(" + e2 + ".toString().startsWith(" + e1 + ")" + ")" + "?" + "(" + e3 + ")" + ":" + "(" + e4 + ")";   :}
        | STRING_LITERAL:s {: RESULT  = "\""+s+"\""; :}
;

funcall_in ::= IDENTIFIER:i LPAREN arg_in:a RPAREN {: RESULT = i+"(" + a + ")"; :}
             | IDENTIFIER:i LPAREN RPAREN {: RESULT = i+"(" +  ")"; :}
;
arg_def ::= IDENTIFIER:i COMMA arg_def:a  {: RESULT = "String " + i + ", " + a; :}
       | IDENTIFIER:i {: RESULT = "String " + i; :}
;
arg_in ::= expr_in:v COMMA  arg_in:a {: RESULT =  v + "," + a; :}
        |expr_in:v {: RESULT = v; :}
;

