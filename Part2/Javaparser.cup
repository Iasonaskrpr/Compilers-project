import java_cup.runtime.*;

parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser2(Scanner s){ this.s=s; }
:}

scan with {: return s.next_token(); :};



/*Terminals*/
terminal            PREFIX,SUFFIX,EQ,CONCAT, LPAREN, RPAREN,LBRAC,RBRAC,COMMA,IF,ELSE,REVERSE;
terminal String     STRING_LITERAL,IDENTIFIER;     

/*  Non terminals */
non terminal            prog,e,expr,funcall,fundef,if_stmt,arg,rev,main,expr_list,arg2;
non terminal String id;

precedence left IDENTIFIER;
precedence left COMMA;
precedence left IF, ELSE;
precedence left PREFIX;       
precedence left CONCAT;    
precedence right REVERSE;  


/*Grammar rules*/
prog ::= e:e1 {: System.out.println("import java.io.*;\n\n"+"class Translated{\n\t"+ e1 + "}" ); :}
        |
;
e ::= main:m {:RESULT = "public static void main(String[] args) {\n\t" + m + "\n}\n";:}
    | fundef:f e:e1 {: RESULT = "public static String "+ f + "\n" + e1; :} // Allow multiple function definitions
    | fundef:f {: RESULT = "public static String "+ f + "\n"; :}

    ;
main ::= funcall:f1 main:m {: RESULT = "System.out.println(" + f1 +")"+ ";"+ "\n\t" + m; :}
       | funcall:f1 {: RESULT = "System.out.println(" + f1 +")"+ ";";  :}
;
expr ::= if_stmt:ifst {: RESULT  = ifst; :}
        |expr_list:e1 {:RESULT = e1;:}
;
expr_list ::= funcall:f {: RESULT  = f; :}
        | expr_list:e1 CONCAT expr_list:e2 {: RESULT  = e1 + "+" + e2; :}
        | id:i {: RESULT  = i; :}
        | rev:r id:i {: RESULT  = r + i; :}
        ;
funcall ::= IDENTIFIER:i LPAREN arg:a RPAREN {: RESULT = i+"(" + a + ")"; :}
          | IDENTIFIER:i LPAREN RPAREN {: RESULT = i+"()"; :}
;

fundef ::= IDENTIFIER:i LPAREN arg2:a IDENTIFIER:i1 RPAREN LBRAC expr:e1 RBRAC {: RESULT = i + "(" + a +"String "+ i1 +")"  +  "{"+ "\n\t" + "return " + e1 + ";"+ "\n" + "}"; :}
         | IDENTIFIER:i LPAREN  RPAREN LBRAC expr:e1 RBRAC {: RESULT = i + "(" + ")" + "{" + "\n\t" + "return " + e1 + ";" + "\n" + "}"; :}
;

if_stmt ::= IF LPAREN expr:e1 PREFIX expr:e2 RPAREN expr:e3 ELSE expr:e4 {: RESULT = "("+ e2 + ".startsWith(" + e1 + ")" + ")" + "?" + "("+ e3 +")"+ ":"  + "("+ e4 +")";   :}        
;
arg ::= expr:e1 COMMA arg:a {: RESULT = e1 + "," + a; :}
       | expr:e1 {: RESULT = e1; :}
;
arg2 ::=IDENTIFIER:i1 COMMA arg2:a  {: RESULT = ", String " + i1 + a; :}
       
;

rev ::= REVERSE rev:r {:RESULT = "reverse " + r;:}
      | REVERSE  {:RESULT = "reverse ";:}
;
id ::= IDENTIFIER:i {: RESULT = i; :}
      | STRING_LITERAL:s {: RESULT = "\"" + s + "\"";:}
;
    