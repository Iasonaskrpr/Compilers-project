
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\012\004\000\002\012\003\000\002\016\003\000" +
    "\002\016\004\000\002\016\003\000\002\016\005\000\002" +
    "\016\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\005\000\002\004\004\000\002\005\006" +
    "\000\002\005\005\000\002\006\011\000\002\006\010\000" +
    "\002\007\013\000\002\015\013\000\002\014\005\000\002" +
    "\014\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\004\000\002\011\003\000\002\017\003\000\002\017\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\uffff\021\007\001\002\000\004\002" +
    "\ufffe\001\002\000\006\002\ufffa\021\033\001\002\000\006" +
    "\002\ufffc\021\007\001\002\000\004\010\013\001\002\000" +
    "\004\002\001\001\002\000\004\002\012\001\002\000\004" +
    "\002\000\001\002\000\014\011\022\015\020\017\026\020" +
    "\015\021\023\001\002\000\016\004\ufff4\007\ufff4\011\ufff4" +
    "\013\ufff4\014\ufff4\016\ufff4\001\002\000\016\004\ufff2\007" +
    "\ufff2\011\ufff2\013\ufff2\014\ufff2\016\ufff2\001\002\000\004" +
    "\011\100\001\002\000\004\020\075\001\002\000\004\010" +
    "\076\001\002\000\016\004\ufff3\007\ufff3\011\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\001\002\000\010\002\uffee\012\043\021" +
    "\uffee\001\002\000\010\010\035\011\uffe8\014\040\001\002" +
    "\000\010\007\032\011\uffe6\014\031\001\002\000\004\011" +
    "\030\001\002\000\010\017\026\020\uffe4\021\uffe4\001\002" +
    "\000\006\020\uffe5\021\uffe5\001\002\000\022\002\uffef\004" +
    "\uffef\007\uffef\011\uffef\013\uffef\014\uffef\016\uffef\021\uffef" +
    "\001\002\000\012\015\020\017\026\020\015\021\033\001" +
    "\002\000\012\015\020\017\026\020\015\021\033\001\002" +
    "\000\004\010\035\001\002\000\016\004\ufff1\007\ufff1\011" +
    "\ufff1\013\ufff1\014\ufff1\016\ufff1\001\002\000\014\011\036" +
    "\015\020\017\026\020\015\021\033\001\002\000\022\002" +
    "\uffee\004\uffee\007\uffee\011\uffee\013\uffee\014\uffee\016\uffee" +
    "\021\uffee\001\002\000\004\011\uffe7\001\002\000\004\021" +
    "\042\001\002\000\004\011\uffe9\001\002\000\006\011\uffe8" +
    "\014\040\001\002\000\012\015\046\017\026\020\015\021" +
    "\047\001\002\000\014\004\ufff7\007\ufff7\011\ufff7\013\ufff7" +
    "\016\ufff7\001\002\000\006\020\075\021\074\001\002\000" +
    "\004\010\055\001\002\000\016\004\ufff9\007\ufff9\010\035" +
    "\011\ufff9\013\ufff9\016\ufff9\001\002\000\014\004\ufff5\007" +
    "\032\011\ufff5\013\ufff5\016\ufff5\001\002\000\006\007\052" +
    "\013\053\001\002\000\012\015\046\017\026\020\015\021" +
    "\047\001\002\000\006\002\uffec\021\uffec\001\002\000\014" +
    "\004\ufff6\007\ufff6\011\ufff6\013\ufff6\016\ufff6\001\002\000" +
    "\012\015\046\017\026\020\015\021\047\001\002\000\006" +
    "\004\066\007\032\001\002\000\006\004\060\007\052\001" +
    "\002\000\012\015\046\017\026\020\015\021\047\001\002" +
    "\000\006\007\052\011\062\001\002\000\012\015\046\017" +
    "\026\020\015\021\047\001\002\000\006\007\052\016\064" +
    "\001\002\000\012\015\046\017\026\020\015\021\047\001" +
    "\002\000\014\004\uffea\007\052\011\uffea\013\uffea\016\uffea" +
    "\001\002\000\012\015\020\017\026\020\015\021\033\001" +
    "\002\000\006\007\032\011\070\001\002\000\012\015\020" +
    "\017\026\020\015\021\033\001\002\000\006\007\032\016" +
    "\072\001\002\000\012\015\020\017\026\020\015\021\033" +
    "\001\002\000\016\004\uffeb\007\032\011\uffeb\013\uffeb\014" +
    "\uffeb\016\uffeb\001\002\000\014\004\ufff8\007\ufff8\011\ufff8" +
    "\013\ufff8\016\ufff8\001\002\000\016\004\ufff0\007\ufff0\011" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\001\002\000\012\015\020" +
    "\017\026\020\015\021\033\001\002\000\006\004\066\007" +
    "\032\001\002\000\004\012\101\001\002\000\012\015\046" +
    "\017\026\020\015\021\047\001\002\000\006\007\052\013" +
    "\103\001\002\000\006\002\uffed\021\uffed\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\014\002\010\003\007\005\004\006\005\012" +
    "\003\001\001\000\002\001\001\000\006\005\004\012\104" +
    "\001\001\000\012\003\103\005\004\006\005\012\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\023\005\020\007\013\010" +
    "\024\011\016\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\023" +
    "\005\020\007\013\010\036\011\016\001\001\000\012\004" +
    "\033\005\020\007\013\011\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\023\005\020\007\013\010" +
    "\024\011\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\047\005\020\007\013\011\044\015\043" +
    "\016\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\047\005\020\007\013\011\044\015" +
    "\043\016\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\055\005\020\007\013\011\044\015\043\016" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\047\005\020\007\013\011\044\015\043\016\060\001" +
    "\001\000\002\001\001\000\016\004\047\005\020\007\013" +
    "\011\044\015\043\016\062\001\001\000\002\001\001\000" +
    "\016\004\047\005\020\007\013\011\044\015\043\016\064" +
    "\001\001\000\002\001\001\000\012\004\066\005\020\007" +
    "\013\011\016\001\001\000\002\001\001\000\012\004\070" +
    "\005\020\007\013\011\016\001\001\000\002\001\001\000" +
    "\012\004\072\005\020\007\013\011\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\076\005\020\007\013\011\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\047\005\020\007\013\011" +
    "\044\015\043\016\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser2(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser2$actions {
  private final Parser2 parser;

  /** Constructor */
  CUP$Parser2$actions(Parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action_part00000000(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser2$result;

      /* select the action based on the action number */
      switch (CUP$Parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= e 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 System.out.println("import java.io.*;\n\n"+"class Translated{\n\t"+ e1 + "}" ); 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		RESULT = start_val;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser2$parser.done_parsing();
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT =null;

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // e ::= main 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "public static void main(String[] args) {\n\t" + m + "\n}\n";
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("e",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // e ::= fundef e 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "public static String  "+ f + "\n" + e1; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("e",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // e ::= fundef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "public static String "+ f + "\n"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("e",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= funcall main 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "System.out.println(" + f1 +")"+ ";"+ "\n\t" + m; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("main",8, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= funcall 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "System.out.println(" + f1 +")"+ ";";  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("main",8, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var ::= rev IDENTIFIER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = r + i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var ::= if_fun 
            {
              Object RESULT =null;
		int iffleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iffright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object iff = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = iff; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var ::= var CONCAT var 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = v1 + "+" + v2; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = e; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("var",12, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= if_stmt 
            {
              Object RESULT =null;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object ifst = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = ifst; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= funcall 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = f; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = "\""+i+"\""; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr CONCAT expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = e1 + "+" + e2; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= rev STRING_LITERAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = r + "\""+i+"\""; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funcall ::= IDENTIFIER LPAREN arg RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		 RESULT = i+"(" + a + ")"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("funcall",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funcall ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		 RESULT = i+"()"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("funcall",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fundef ::= IDENTIFIER LPAREN arg2 RPAREN LBRAC var RBRAC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		 RESULT = i + "(" + a + ")" + "{" + "\n\t" + "return " + e1 + ";"+ "\n" + "}"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("fundef",4, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fundef ::= IDENTIFIER LPAREN RPAREN LBRAC var RBRAC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		 RESULT = i + "(" + ")" + "{" + "\n\t" + "return " + e1 + ";" + "\n" + "}"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("fundef",4, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stmt ::= IF LPAREN expr PREFIX expr RPAREN expr ELSE expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "("+ e2 + ".startsWith(" + e1 + ")" + ")" + "?" + "("+ e3 +")"+ ":"  + "("+ e4 +")";   
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-8)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_fun ::= IF LPAREN var PREFIX var RPAREN var ELSE var 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object v3 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object v4 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "("+ v2 + ".startsWith(" + v1 + ")" + ")" + "?" + "("+ v3 +")"+ ":"  + "("+ v4 +")";   
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("if_fun",11, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-8)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // arg2 ::= IDENTIFIER COMMA arg2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "String " + i + ", " + a; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg2",10, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // arg2 ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "String " + i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg2",10, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arg ::= expr COMMA arg 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = e1 + "," + a; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg",6, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arg ::= expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg",6, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rev ::= REVERSE rev 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "reverse " + r;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("rev",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rev ::= REVERSE 
            {
              Object RESULT =null;
		RESULT = "reverse ";
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("rev",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("id",13, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // id ::= STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "\"" + s + "\"";
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("id",13, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
              return CUP$Parser2$do_action_part00000000(
                               CUP$Parser2$act_num,
                               CUP$Parser2$parser,
                               CUP$Parser2$stack,
                               CUP$Parser2$top);
    }
}

}
