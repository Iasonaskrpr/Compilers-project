
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\012\004\000\002\012\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\005\000\002\004\003\000\002" +
    "\004\004\000\002\005\006\000\002\005\005\000\002\006" +
    "\011\000\002\006\010\000\002\007\013\000\002\014\005" +
    "\000\002\014\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\004\000\002\011\003\000\002\015\003\000\002" +
    "\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\006\002\uffff\021\007\001\002\000\004\002" +
    "\ufffe\001\002\000\006\002\ufffa\021\063\001\002\000\006" +
    "\002\ufffc\021\007\001\002\000\004\010\013\001\002\000" +
    "\004\002\001\001\002\000\004\002\012\001\002\000\004" +
    "\002\000\001\002\000\014\011\022\015\020\017\026\020" +
    "\016\021\023\001\002\000\016\004\ufff6\007\ufff6\011\ufff6" +
    "\013\ufff6\014\ufff6\016\ufff6\001\002\000\016\004\ufff8\007" +
    "\ufff8\011\ufff8\013\ufff8\014\ufff8\016\ufff8\001\002\000\016" +
    "\004\uffe8\007\uffe8\011\uffe8\013\uffe8\014\uffe8\016\uffe8\001" +
    "\002\000\006\020\016\021\057\001\002\000\004\010\047" +
    "\001\002\000\016\004\ufff9\007\ufff9\011\ufff9\013\ufff9\014" +
    "\ufff9\016\ufff9\001\002\000\010\002\ufff3\012\044\021\ufff3" +
    "\001\002\000\020\004\uffe9\007\uffe9\010\040\011\uffe9\013" +
    "\uffe9\014\uffe9\016\uffe9\001\002\000\010\007\033\011\uffec" +
    "\014\036\001\002\000\004\011\030\001\002\000\010\017" +
    "\026\020\uffea\021\uffea\001\002\000\006\020\uffeb\021\uffeb" +
    "\001\002\000\010\002\ufff4\012\031\021\ufff4\001\002\000" +
    "\012\015\020\017\026\020\016\021\023\001\002\000\006" +
    "\007\033\013\034\001\002\000\012\015\020\017\026\020" +
    "\016\021\023\001\002\000\006\002\ufff2\021\ufff2\001\002" +
    "\000\016\004\ufff7\007\ufff7\011\ufff7\013\ufff7\014\ufff7\016" +
    "\ufff7\001\002\000\012\015\020\017\026\020\016\021\023" +
    "\001\002\000\004\011\uffed\001\002\000\014\011\041\015" +
    "\020\017\026\020\016\021\023\001\002\000\022\002\ufff3" +
    "\004\ufff3\007\ufff3\011\ufff3\013\ufff3\014\ufff3\016\ufff3\021" +
    "\ufff3\001\002\000\004\011\043\001\002\000\022\002\ufff4" +
    "\004\ufff4\007\ufff4\011\ufff4\013\ufff4\014\ufff4\016\ufff4\021" +
    "\ufff4\001\002\000\012\015\020\017\026\020\016\021\023" +
    "\001\002\000\006\007\033\013\046\001\002\000\006\002" +
    "\ufff1\021\ufff1\001\002\000\012\015\020\017\026\020\016" +
    "\021\023\001\002\000\006\004\051\007\033\001\002\000" +
    "\012\015\020\017\026\020\016\021\023\001\002\000\006" +
    "\007\033\011\053\001\002\000\012\015\020\017\026\020" +
    "\016\021\023\001\002\000\006\007\033\016\055\001\002" +
    "\000\012\015\020\017\026\020\016\021\023\001\002\000" +
    "\016\004\ufff0\007\033\011\ufff0\013\ufff0\014\ufff0\016\ufff0" +
    "\001\002\000\016\004\uffe9\007\uffe9\011\uffe9\013\uffe9\014" +
    "\uffe9\016\uffe9\001\002\000\016\004\ufff5\007\ufff5\011\ufff5" +
    "\013\ufff5\014\ufff5\016\ufff5\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffb\001\002\000\004\010\040\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\014\002\010\003\007\005\004\006\005\012" +
    "\003\001\001\000\002\001\001\000\006\005\004\012\061" +
    "\001\001\000\012\003\060\005\004\006\005\012\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\023\005\020\007\014\010" +
    "\024\011\016\015\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\031\005\020\007\014\011\016\015\013\001\001\000" +
    "\002\001\001\000\014\004\034\005\020\007\014\011\016" +
    "\015\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\023\005\020\007\014\010\036\011\016\015\013" +
    "\001\001\000\002\001\001\000\016\004\023\005\020\007" +
    "\014\010\041\011\016\015\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\044\005" +
    "\020\007\014\011\016\015\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\047\005\020\007\014\011" +
    "\016\015\013\001\001\000\002\001\001\000\014\004\051" +
    "\005\020\007\014\011\016\015\013\001\001\000\002\001" +
    "\001\000\014\004\053\005\020\007\014\011\016\015\013" +
    "\001\001\000\002\001\001\000\014\004\055\005\020\007" +
    "\014\011\016\015\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Connect this parser to a scanner!
    Scanner s;
    Parser2(Scanner s){ this.s=s; }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser2$actions {
  private final Parser2 parser;

  /** Constructor */
  CUP$Parser2$actions(Parser2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action_part00000000(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser2$result;

      /* select the action based on the action number */
      switch (CUP$Parser2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= e 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 System.out.println("import java.io.*;\n\n"+"class Translated{\n\t"+ e1 + "}" ); 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		RESULT = start_val;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser2$parser.done_parsing();
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT =null;

              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // e ::= main 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "public static void main(String[] args) {\n\t" + m + "\n}\n";
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("e",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // e ::= fundef e 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "public String "+ f + "\n" + e1; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("e",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // e ::= fundef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "public String "+ f + "\n"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("e",1, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= funcall main 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = f1 + ";"+ "\n" + m; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("main",8, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main ::= funcall 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = f1 + ";";  
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("main",8, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= funcall 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = f; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= if_stmt 
            {
              Object RESULT =null;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object ifst = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = ifst; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr CONCAT expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = e1 + "+" + e2; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= rev id 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT  = r + i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcall ::= IDENTIFIER LPAREN arg RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		 RESULT = i+"(" + a + ")"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("funcall",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-3)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funcall ::= IDENTIFIER LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		 RESULT = i+"()"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("funcall",3, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fundef ::= IDENTIFIER LPAREN arg RPAREN LBRAC expr RBRAC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		 RESULT = i + "(" + a + ")" + "{" + "\n\t" + "return " + e1 + ";"+ "\n" + "}"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("fundef",4, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fundef ::= IDENTIFIER LPAREN RPAREN LBRAC expr RBRAC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)).value;
		 RESULT = i + "(" + ")" + "{" + "\n\t" + "return " + e1 + ";" + "\n" + "}"; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("fundef",4, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-5)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // if_stmt ::= IF LPAREN expr PREFIX expr RPAREN expr ELSE expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "("+ e2 + ".startsWith(" + e1 + ")" + ")" + "?" + "("+ e3 +")"+ ":"  + "("+ e4 +")";   
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-8)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arg2 ::= IDENTIFIER COMMA arg2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = i + "," + a; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg2",10, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arg2 ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg2",10, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arg ::= expr COMMA arg 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = e1 + "," + a; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg",6, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-2)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arg ::= expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = e1; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("arg",6, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rev ::= REVERSE rev 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		RESULT = "reverse " + r;
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("rev",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.elementAt(CUP$Parser2$top-1)), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rev ::= REVERSE 
            {
              Object RESULT =null;
		RESULT = "reverse ";
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("rev",7, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("id",11, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id ::= STRING_LITERAL 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser2$stack.peek()).value;
		 RESULT = "\"" + s + "\"";
              CUP$Parser2$result = parser.getSymbolFactory().newSymbol("id",11, ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser2$stack.peek()), RESULT);
            }
          return CUP$Parser2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser2$do_action(
    int                        CUP$Parser2$act_num,
    java_cup.runtime.lr_parser CUP$Parser2$parser,
    java.util.Stack            CUP$Parser2$stack,
    int                        CUP$Parser2$top)
    throws java.lang.Exception
    {
              return CUP$Parser2$do_action_part00000000(
                               CUP$Parser2$act_num,
                               CUP$Parser2$parser,
                               CUP$Parser2$stack,
                               CUP$Parser2$top);
    }
}

}
